name: Staging Deployment

on:
    workflow_dispatch:
    push:
        branches:
            - main

jobs:
    # Staging Deployment Job
    staging_deployment:
        name: Deploy to staging
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            
            - name: Set up Node.js
              uses: actions/setup-node@v4
              
            - name: Install Node.js dependencies
              working-directory: ./resume_evaluator
              run: npm install
              
            - name: Attempt non-breaking fixes
              working-directory: ./resume_evaluator
              run: npm audit fix

            - name: Run Node.js tests
              working-directory: ./resume_evaluator
              run: npm run test
            
            - name: Lint Node.js code
              working-directory: ./resume_evaluator
              run: npm run lint

            - name: Node.js security audit
              working-directory: ./resume_evaluator
              run: npm audit --production --audit-level=moderate

            - name: Build Next.JS webapp
              run: docker build . -t resume-evaluator-prod -f ./Dockerfile.prod

            - name: Authenticate with Google Cloud
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_DEPLOY_S }}

            - name: Set up Google Cloud SDK
              uses: google-github-actions/setup-gcloud@v2

            - name: Verify authentication
              run: gcloud auth list

            - name: Configure Docker to push to Google Artifact Registry
              run: gcloud auth configure-docker ${{ secrets.GCP_LOCATION }}-docker.pkg.dev

            - name: Build and push Docker image
              run: |
                IMAGE_URI="${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-run-source-deploy/$(basename $GITHUB_REPOSITORY):latest"
                docker build . -t "$IMAGE_URI" -f ./Dockerfile.prod
                docker push "$IMAGE_URI"

            - name: Deploy to Google Cloud Run
              run: |
                IMAGE_URI="${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-run-source-deploy/$(basename $GITHUB_REPOSITORY):latest"
                gcloud run deploy resume-evaluator-prod \
                  --image "$IMAGE_URI" \
                  --platform managed \
                  --region ${{ secrets.GCP_LOCATION }} \
                  --port 8080 \
                  --memory 2Gi \
                  --cpu 1 \
                  --max-instances 2 \
                  --project ${{ secrets.GCP_PROJECT_ID }} \
                  --service-account ${{ secrets.GCP_SA }} \
                  --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }} \
                  --set-env-vars BASE_PATH=${{ secrets.BASE_PATH }} \
                  --set-env-vars AUTH_URL=${{ secrets.AUTH_URL }} \
                  --set-env-vars AUTH_SECRET=${{ secrets.AUTH_SECRET }} \
                  --set-env-vars GITHUB_CLIENT_ID=${{ secrets.CLIENT_ID_GITHUB }} \
                  --set-env-vars GITHUB_CLIENT_SECRET=${{ secrets.CLIENT_SECRET_GITHUB }} \
                  --set-env-vars GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
                  --set-env-vars GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
                  --set-env-vars LINKEDIN_CLIENT_ID=${{ secrets.LINKEDIN_CLIENT_ID }} \
                  --set-env-vars LINKEDIN_CLIENT_SECRET=${{ secrets.LINKEDIN_CLIENT_SECRET }} \
                  --set-env-vars SMTP_SERVER_USERNAME=${{ secrets.SMTP_SERVER_USERNAME }} \
                  --set-env-vars SMTP_SERVER_PASSWORD=${{ secrets.SMTP_SERVER_PASSWORD }} \
                  --set-env-vars SMTP_SERVER_HOST=${{ secrets.SMTP_SERVER_HOST }} \
                  --set-env-vars GPT_API_KEY=${{ secrets.GPT_API_KEY }} \
                  --set-env-vars PINATA_API_KEY=${{ secrets.PINATA_API_KEY }} \
                  --set-env-vars PINATA_URL=${{ secrets.PINATA_URL }} \

    ############################ 
    # Activate in later stages #
    ############################
    # CodeQL security scan
    # codeQL-scan:
    #     name: CodeQL security scan
    #     runs-on: ubuntu-latest
    #     permissions:
    #       actions: read
    #       contents: read
    #       security-events: write

    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v4

    #         - name: Initialize CodeQL
    #           uses: github/codeql-action/init@v3
    #           with:
    #             languages: python, go, javascript-typescript
            
    #         - name: Run CodeQL analysis
    #           uses: github/codeql-action/analyze@v3
    #           with:
    #             category: "Security"
